"use strict";(globalThis.webpackChunkdkmfzf_frontend_portfolio=globalThis.webpackChunkdkmfzf_frontend_portfolio||[]).push([[89],{48089:(n,e,o)=>{o.r(e),o.d(e,{default:()=>a});var i=o(74848),t=o(96540),r=o(24922),s=o(39437);const a=()=>{const n=(0,t.useRef)(null),e=(0,t.useRef)(new r.I9Y(0,0));return(0,t.useEffect)((()=>{const o=new r.Z58,i=new r.qUd(-1,1,1,-1,.1,10),t=new s.WebGLRenderer({antialias:!0});t.setSize(window.innerWidth,window.innerHeight),n.current&&n.current.appendChild(t.domElement);const a=new r.bdM(2,2),u=new r.BKk({vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 vPosition;\nvarying vec3 vWorldPosition;\n\nvoid main() {\n  vUv = uv;\n  vNormal = normal;\n  vPosition = position;\n  vWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}",fragmentShader:"precision highp float;\n#define GLSLIFY 1\nuniform float u_time;\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\n\nfloat hash(vec2 p) {\n  return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);\n}\nfloat noise(vec2 p) {\n  vec2 i = floor(p);\n  vec2 f = fract(p);\n  vec2 u = f * f * (3.0 - 2.0 * f);\n  return mix(\n    mix(hash(i), hash(i + vec2(1.0, 0.0)), u.x),\n    mix(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), u.x),\n    u.y\n  );\n}\nfloat fbm(vec2 p) {\n  float val = 0.0;\n  float amp = 0.5;\n  for (int i = 0; i < 5; i++) {\n    val += amp * noise(p);\n    p *= 2.0;\n    amp *= 0.5;\n  }\n  return val;\n}\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / u_resolution.xy;\n  vec2 p = uv - 0.5;\n  p.x *= u_resolution.x / u_resolution.y;\n\n  vec2 mouse = u_mouse / u_resolution;\n  vec2 mouseCentered = mouse - 0.5;\n  mouseCentered.x *= u_resolution.x / u_resolution.y;\n\n  // Притягиваем к мыши\n  float distToMouse = length(p - mouseCentered);\n  p += 0.15 * normalize(p - mouseCentered) * exp(-distToMouse * 10.0);\n\n  // Пульсация\n  p += 0.15 * sin(5.0 * p.yx + u_time * 1.5);\n\n  float r = length(p);\n  float angle = atan(p.y, p.x);\n\n  float n = fbm(p * 3.0 + u_time * 0.5);\n  float core = smoothstep(0.3, 0.0, r - n * 0.15);\n  float glow = exp(-r * 4.0);\n\n  vec3 gradient = mix(vec3(1.0, 0.2, 0.0), vec3(0.0, 0.0, 1.0), uv.y);\n  float rays = sin(angle * 10.0 + u_time * 2.0) * 0.1;\n  float rayMask = smoothstep(0.2, 0.0, abs(rays - r));\n\n  vec3 col = vec3(0.0);\n  col += core * gradient;\n  col += glow * vec3(1.0, 0.0, 1.0);\n  col += pow(glow, 1.5) * vec3(0.3, 0.0, 1.0);\n  col += rayMask * vec3(1.0, 0.0, 0.8);\n\n  gl_FragColor = vec4(col, 1.0);\n}\n",uniforms:{u_time:{value:0},u_resolution:{value:new r.I9Y(window.innerWidth,window.innerHeight)},u_mouse:{value:new r.I9Y(0,0)}}}),l=new r.eaF(a,u);o.add(l),i.position.z=1;const v=n=>{e.current.set(n.clientX,window.innerHeight-n.clientY)};let c;window.addEventListener("mousemove",v);const d=()=>{c=requestAnimationFrame(d),u.uniforms.u_time.value+=.01,u.uniforms.u_mouse.value.copy(e.current),t.render(o,i)};d();const m=()=>{t.setSize(window.innerWidth,window.innerHeight),u.uniforms.u_resolution.value.set(window.innerWidth,window.innerHeight),i.updateProjectionMatrix()};return window.addEventListener("resize",m),()=>{cancelAnimationFrame(c),window.removeEventListener("resize",m),window.removeEventListener("mousemove",v),n.current&&n.current.contains(t.domElement)&&n.current.removeChild(t.domElement)}}),[]),(0,i.jsx)("div",{ref:n,style:{position:"fixed",top:0,left:0,width:"100%",height:"100%",zIndex:0}})}}}]);